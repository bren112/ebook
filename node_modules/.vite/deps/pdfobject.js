import {
  __commonJS
} from "./chunk-V4OQ3NZ2.js";

// node_modules/pdfobject/pdfobject.js
var require_pdfobject = __commonJS({
  "node_modules/pdfobject/pdfobject.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define([], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory();
      } else {
        root.PDFObject = factory();
      }
    })(exports, function() {
      "use strict";
      if (typeof window === "undefined" || window.navigator === void 0 || window.navigator.userAgent === void 0) {
        return false;
      }
      let pdfobjectversion = "2.3.0";
      let win = window;
      let nav = win.navigator;
      let ua = nav.userAgent;
      let suppressConsole = false;
      let isModernBrowser = function() {
        let isChromium = win.chrome !== void 0;
        let isSafari = win.safari !== void 0 || nav.vendor !== void 0 && /Apple/.test(nav.vendor) && /Safari/.test(ua);
        let isFirefox = win.Mozilla !== void 0 || /irefox/.test(ua);
        return isChromium || isSafari || isFirefox;
      };
      let validateAX = function(type) {
        var ax = null;
        try {
          ax = new ActiveXObject(type);
        } catch (e) {
          ax = null;
        }
        return !!ax;
      };
      let hasActiveXPDFPlugin = function() {
        return "ActiveXObject" in win && (validateAX("AcroPDF.PDF") || validateAX("PDF.PdfCtrl"));
      };
      let checkSupport = function() {
        let isSafariIOSDesktopMode = nav.platform !== void 0 && nav.platform === "MacIntel" && nav.maxTouchPoints !== void 0 && nav.maxTouchPoints > 1;
        let isMobileDevice = isSafariIOSDesktopMode || /Mobi|Tablet|Android|iPad|iPhone/.test(ua);
        if (isMobileDevice) {
          return false;
        }
        let supportsPDFVE = typeof nav.pdfViewerEnabled === "boolean";
        if (supportsPDFVE && !nav.pdfViewerEnabled) {
          return false;
        }
        return supportsPDFVE && nav.pdfViewerEnabled || isModernBrowser() || hasActiveXPDFPlugin();
      };
      let supportsPDFs = checkSupport();
      let buildURLFragmentString = function(pdfParams) {
        let string = "";
        let prop;
        let paramArray = [];
        let fdf = "";
        if (pdfParams.comment || pdfParams.viewrect || pdfParams.highlight) {
          if (!pdfParams.page) {
            pdfParams.page = 1;
            embedError("The comment, viewrect, and highlight parameters require a page parameter, but none was specified. Defaulting to page 1.");
          }
        }
        if (pdfParams.page) {
          paramArray.push("page=" + encodeURIComponent(pdfParams.page));
          delete pdfParams.page;
        }
        if (pdfParams.fdf) {
          fdf = pdfParams.fdf;
          delete pdfParams.fdf;
        }
        if (pdfParams) {
          for (prop in pdfParams) {
            if (pdfParams.hasOwnProperty(prop)) {
              paramArray.push(encodeURIComponent(prop) + "=" + encodeURIComponent(pdfParams[prop]));
            }
          }
          if (fdf) {
            paramArray.push("fdf=" + encodeURIComponent(fdf));
          }
          string = paramArray.join("&");
          if (string) {
            string = "#" + string;
          }
        }
        return string;
      };
      let embedError = function(msg) {
        if (!suppressConsole) {
          console.log("[PDFObject]", msg);
        }
        return false;
      };
      let emptyNodeContents = function(node) {
        while (node.firstChild) {
          node.removeChild(node.firstChild);
        }
      };
      let getTargetElement = function(targetSelector) {
        let targetNode = document.body;
        if (typeof targetSelector === "string") {
          targetNode = document.querySelector(targetSelector);
        } else if (win.jQuery !== void 0 && targetSelector instanceof jQuery && targetSelector.length) {
          targetNode = targetSelector.get(0);
        } else if (targetSelector.nodeType !== void 0 && targetSelector.nodeType === 1) {
          targetNode = targetSelector;
        }
        return targetNode;
      };
      let convertBase64ToDownloadableLink = function(b64, filename, targetNode, fallbackHTML) {
        if (window.Blob && window.URL && window.URL.createObjectURL) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", b64, true);
          xhr.responseType = "blob";
          xhr.onload = function() {
            if (xhr.status === 200) {
              var blob = xhr.response;
              var link = document.createElement("a");
              link.innerText = "Download PDF";
              link.href = URL.createObjectURL(blob);
              link.setAttribute("download", filename);
              targetNode.innerHTML = fallbackHTML.replace(/\[pdflink\]/g, link.outerHTML);
            }
          };
          xhr.send();
        }
      };
      let generatePDFObjectMarkup = function(embedType, targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL) {
        emptyNodeContents(targetNode);
        let source = url;
        if (embedType === "pdfjs") {
          let connector = PDFJS_URL.indexOf("?") !== -1 ? "&" : "?";
          source = PDFJS_URL + connector + "file=" + encodeURIComponent(url) + pdfOpenFragment;
        } else {
          source += pdfOpenFragment;
        }
        let el = document.createElement("iframe");
        el.className = "pdfobject";
        el.type = "application/pdf";
        el.title = title;
        el.src = source;
        el.allow = "fullscreen";
        el.frameborder = "0";
        if (id) {
          el.id = id;
        }
        if (!omitInlineStyles) {
          let style = "border: none;";
          if (targetNode !== document.body) {
            style += "width: " + width + "; height: " + height + ";";
          } else {
            style += "position: absolute; top: 0; right: 0; bottom: 0; left: 0; width: 100%; height: 100%;";
          }
          el.style.cssText = style;
        }
        let reservedTokens = ["className", "type", "title", "src", "style", "id", "allow", "frameborder"];
        if (customAttribute && customAttribute.key && reservedTokens.indexOf(customAttribute.key) === -1) {
          el.setAttribute(customAttribute.key, typeof customAttribute.value !== "undefined" ? customAttribute.value : "");
        }
        targetNode.classList.add("pdfobject-container");
        targetNode.appendChild(el);
        return targetNode.getElementsByTagName("iframe")[0];
      };
      let embed = function(url, targetSelector, options) {
        let selector = targetSelector || false;
        let opt = options || {};
        suppressConsole = typeof opt.suppressConsole === "boolean" ? opt.suppressConsole : false;
        let id = typeof opt.id === "string" ? opt.id : "";
        let page = opt.page || false;
        let pdfOpenParams = opt.pdfOpenParams || {};
        let fallbackLink = typeof opt.fallbackLink === "string" || typeof opt.fallbackLink === "boolean" ? opt.fallbackLink : true;
        let width = opt.width || "100%";
        let height = opt.height || "100%";
        let title = opt.title || "Embedded PDF";
        let forcePDFJS = typeof opt.forcePDFJS === "boolean" ? opt.forcePDFJS : false;
        let omitInlineStyles = typeof opt.omitInlineStyles === "boolean" ? opt.omitInlineStyles : false;
        let PDFJS_URL = opt.PDFJS_URL || false;
        let targetNode = getTargetElement(selector);
        let pdfOpenFragment = "";
        let customAttribute = opt.customAttribute || {};
        let fallbackHTML_default = "<p>This browser does not support inline PDFs. Please download the PDF to view it: [pdflink]</p>";
        if (typeof url !== "string") {
          return embedError("URL is not valid");
        }
        if (!targetNode) {
          return embedError("Target element cannot be determined");
        }
        if (page) {
          pdfOpenParams.page = page;
        }
        pdfOpenFragment = buildURLFragmentString(pdfOpenParams);
        if (forcePDFJS && PDFJS_URL) {
          return generatePDFObjectMarkup("pdfjs", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL);
        }
        if (supportsPDFs) {
          return generatePDFObjectMarkup("iframe", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute);
        }
        if (PDFJS_URL) {
          return generatePDFObjectMarkup("pdfjs", targetNode, url, pdfOpenFragment, width, height, id, title, omitInlineStyles, customAttribute, PDFJS_URL);
        }
        if (fallbackLink) {
          if (typeof fallbackLink === "string") {
            targetNode.innerHTML = fallbackLink.replace(/\[url\]/g, url);
          } else {
            if (url.indexOf("data:application/pdf;base64") !== -1) {
              convertBase64ToDownloadableLink(url, "file.pdf", targetNode, fallbackHTML_default);
            } else {
              let link = "<a href='" + url + "'>Download PDF</a>";
              targetNode.innerHTML = fallbackHTML_default.replace(/\[pdflink\]/g, link);
            }
          }
        }
        return embedError("This browser does not support embedded PDFs");
      };
      return {
        embed: function(a, b, c) {
          return embed(a, b, c);
        },
        pdfobjectversion: /* @__PURE__ */ function() {
          return pdfobjectversion;
        }(),
        supportsPDFs: /* @__PURE__ */ function() {
          return supportsPDFs;
        }()
      };
    });
  }
});
export default require_pdfobject();
/*! Bundled license information:

pdfobject/pdfobject.js:
  (**
   *  PDFObject v2.3.0
   *  https://github.com/pipwerks/PDFObject
   *  @license
   *  Copyright (c) 2008-2024 Philip Hutchison
   *  MIT-style license: http://pipwerks.mit-license.org/
   *  UMD module pattern from https://github.com/umdjs/umd/blob/master/templates/returnExports.js
   *)
*/
//# sourceMappingURL=pdfobject.js.map
